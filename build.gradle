plugins {
	id 'java'
	id 'scala'
	id 'fabric-loom' version 'e3d1762'
	id 'maven-publish'
}

sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8

archivesBaseName = "Galvanisto"
version = "0.1.0"
group = "io.github.boogiemonster1o1"

repositories {
	maven {
		name = 'Legacy-Fabric'
		url = 'https://dl.bintray.com/legacy-fabric/Legacy-Fabric-Maven'
	}
	maven {
		name = 'Jitpack'
		url = 'https://jitpack.io'
	}
	flatDir name: 'flatDirRepo', dirs: 'libs'
}

dependencies {
	minecraft "com.mojang:minecraft:1.8.9"
	mappings "net.fabricmc:yarn:1.8.9+build.202011050955:v2"
	implementation "com.google.guava:guava:23.5-jre"
	modImplementation  "net.fabricmc:fabric-loader-1.8.9:0.9.3+build.202009100647"
	modImplementation "net.fabricmc.fabric-api:fabric-api:0.10.0"
	modImplementation ":energy@jar"

	modApi("net.fabricmc:fabric-language-scala:0.3.2.+") {
		exclude group: 'net.fabricmc'
	}

	if (System.getProperty("os.name").toLowerCase().contains("mac")) {
		implementation 'org.lwjgl.lwjgl:lwjgl_util:2.9.4-nightly-20150209'
		implementation 'org.lwjgl.lwjgl:lwjgl:2.9.4-nightly-20150209'
		implementation 'org.lwjgl.lwjgl:lwjgl-platform:2.9.4-nightly-20150209'
	}
}

if (System.getProperty("os.name").toLowerCase().contains("mac")) {
	configurations.all {
		resolutionStrategy {
			dependencySubstitution {
				substitute module('org.lwjgl.lwjgl:lwjgl_util:2.9.2-nightly-201408222') with module('org.lwjgl.lwjgl:lwjgl_util:2.9.4-nightly-20150209')
				substitute module('org.lwjgl.lwjgl:lwjgl:2.9.2-nightly-201408222') with module('org.lwjgl.lwjgl:lwjgl:2.9.4-nightly-20150209')
			}
			force 'org.lwjgl.lwjgl:lwjgl-platform:2.9.4-nightly-20150209'
		}
	}
}

processResources {
	inputs.property "version", project.version

	filesMatching("fabric.mod.json") {
		expand "version": project.version
	}
}

sourceSets {
	main {
		java {
			srcDirs = []
		}
		scala {
			srcDirs = ['src/main/scala', 'src/main/java']
		}
	}
}

tasks.withType(JavaCompile).configureEach {
	// ensure that the encoding is set to UTF-8, no matter what the system default is
	// this fixes some edge cases with special characters not displaying correctly
	// see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
	// If Javadoc is generated, this must be specified in that task too.
	it.options.encoding = "UTF-8"

	// The Minecraft launcher currently installs Java 8 for users, so your mod probably wants to target Java 8 too
	// JDK 9 introduced a new way of specifying this that will make sure no newer classes or methods are used.
	// We'll use that if it's available, but otherwise we'll use the older option.
	def targetVersion = 8
	if (JavaVersion.current().isJava9Compatible()) {
		 it.options.release = targetVersion
	}
}

java {
	// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
	// if it is present.
	// If you remove this line, sources will not be generated.
	withSourcesJar()
}

jar {
	from("LICENSE") {
		rename { "${it}_${project.archivesBaseName}"}
	}
}

// configure the maven publication
publishing {
	publications {
		mavenJava(MavenPublication) {
			// add all the jars that should be included when publishing to maven
			artifact(remapJar) {
				builtBy remapJar
			}
			artifact(sourcesJar) {
				builtBy remapSourcesJar
			}
		}
	}

	// Select the repositories you want to publish to
	// To publish to maven local, no extra repositories are necessary. Just use the task `publishToMavenLocal`.
	repositories {
		// See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
	}
}
